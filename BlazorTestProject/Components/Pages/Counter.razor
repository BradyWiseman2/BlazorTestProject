
@inherits ClientBase
@using Microsoft.AspNetCore.Identity
@using BlazorTestProject.Data
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<ApplicationUser> UserManager
<PageTitle>Counter</PageTitle>
<style>
    .Client {
    vertical-align:bottom;
    position:absolute;
    bottom:0%;
    margin-right: auto;
    margin-left: auto;
    }
    div.Player{
    position:relative;
    vertical-align: top;
    display: inline-block;
    text-align: center;
    font-size: 1em;		
    width: 24%;	
    height: 20%;
    align-items:center;
    margin-right: auto;
    margin-left: auto;
    min-width:250px;
    background-color:azure;
    min-height:300px;
    }
    .Players{
    align-items: center;
    text-align: center;
    background-color:lightblue;
    }
    .BlockAnim{
    min-block-size:64px;        

    }   
    .PlayerAnim {
    min-block-size: 96px;
    margin-right: 30%;
    margin-left: 30%;

    }
</style>
<h1>Counter</h1>

<AuthorizeView>
    <p role="status">Account: @context.User.Identity.Name</p>
</AuthorizeView>

<p role="status">Jump Height: @JumpHeight</p>
<p role="status">Connected Clients: @ClientsConnected</p>

@if(State != MashingGameState.Ended){
    <p class="Countdown">@(3-ElapsedSeconds)</p>
}

<div class="Players">
    @for(int i = 0; i < Clients.Count; i++)
    {
        if(Clients[i]!=null){
            <div class="Player">
                <img src="@BlockPath" class="BlockAnim" alt="Block">
                <img src="@Clients[i].CharacterPath" class="PlayerAnim" alt="Player" style="margin-top:@Clients[i].JumpHeight;">
                <h1 class="Client">@Clients[i].ClientName: @Clients[i].ClientCount</h1>
            </div>
        }       
    }
</div>


<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
@if(this == GameHost && State == MashingGameState.Ended){
    <button class="btn btn-primary" @onclick="StartGame">Start Game</button>
}

@code {
        
   
}